"""
Вычисление вероятностей выпадания каждой суммы
чисел на гранях игрального кубика при трехкратном 
броске
"""
from itertools import product
from pprint import pprint
from collections import Counter


# У игрального кубика 6 граней
options = range(1, 7)

# Сгенерируем все тройки граней, которые выпадут
# если бросить кубик 3 раза
outcomes = product(options,  repeat=3)
# Заметим, что product возвращает генератор, поэтому
# нам не нужно хранить все тройки в памяти

# Посчитаем сумму каждой тройки
sum_outcomes = (sum(outcome) for outcome in outcomes)
# Нам не нужен весь список, поэтому достаточно
# использовать generator expression

# Посчитаем, сколько раз встречается каждая тройка
c = Counter(sum_outcomes)

# Посчитаем количество всех троек как сумму появлений
# каждой тройки
outcome_count = sum(c.values())

# Посчитаем распределение нашей дискретной случайной
# величины, т.е. вероятность выпадания троек с нужной
# суммой
distribution = {
    key: value / outcome_count 
    for key, value in c.items()
}
# По сути, посчитаем долю появлений каждой суммы
# от общего числа появлений

pprint(distribution)
#>{3: 0.004629629629629629,
#> 4: 0.013888888888888888,
#> 5: 0.027777777777777776,
#> 6: 0.046296296296296294,
#> 7: 0.06944444444444445,
#> 8: 0.09722222222222222,
#> 9: 0.11574074074074074,
#> 10: 0.125,
#> 11: 0.125,
#> 12: 0.11574074074074074,
#> 13: 0.09722222222222222,
#> 14: 0.06944444444444445,
#> 15: 0.046296296296296294,
#> 16: 0.027777777777777776,
#> 17: 0.013888888888888888,
#> 18: 0.004629629629629629}
